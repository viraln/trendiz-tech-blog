{
  "version": 3,
  "sources": ["../../../../../../Users/saar/Desktop/Development/Trendiz - V2 - New/netlify/functions/debug.js"],
  "sourceRoot": "/var/folders/m3/6vvlwt5j6_xfs5p09y3sjxj40000gn/T/tmp-29357-hHrEtXsKzlM2",
  "sourcesContent": ["const path = require('path');\nconst fs = require('fs');\n\nexports.handler = async (event, context) => {\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Content-Type': 'application/json'\n  };\n  \n  try {\n    const debugInfo = {\n      environment: process.env.NODE_ENV,\n      currentDirectory: process.cwd(),\n      files: {}\n    };\n    \n    // Check various paths where content could be located\n    const pathsToCheck = [\n      './content/articles',\n      '../content/articles',\n      '../../content/articles',\n      '/opt/build/repo/content/articles',\n      '/var/task/content/articles',\n      '/opt/build/content/articles',\n      path.join(process.cwd(), 'content/articles'),\n      path.join(process.cwd(), '../content/articles'),\n      path.join(process.cwd(), '../../content/articles')\n    ];\n    \n    debugInfo.pathChecks = {};\n    \n    // Check each path\n    for (const dirPath of pathsToCheck) {\n      debugInfo.pathChecks[dirPath] = {\n        exists: false,\n        isDirectory: false,\n        readable: false,\n        files: [],\n        error: null\n      };\n      \n      try {\n        // Check if path exists\n        const exists = fs.existsSync(dirPath);\n        debugInfo.pathChecks[dirPath].exists = exists;\n        \n        if (exists) {\n          // Check if it's a directory\n          const stats = fs.statSync(dirPath);\n          debugInfo.pathChecks[dirPath].isDirectory = stats.isDirectory();\n          \n          // Try to read the directory\n          if (stats.isDirectory()) {\n            try {\n              fs.accessSync(dirPath, fs.constants.R_OK);\n              debugInfo.pathChecks[dirPath].readable = true;\n              \n              // List files (up to 10)\n              const files = fs.readdirSync(dirPath);\n              debugInfo.pathChecks[dirPath].fileCount = files.length;\n              debugInfo.pathChecks[dirPath].files = files.slice(0, 10);\n            } catch (readError) {\n              debugInfo.pathChecks[dirPath].error = `Cannot read directory: ${readError.message}`;\n            }\n          }\n        }\n      } catch (checkError) {\n        debugInfo.pathChecks[dirPath].error = checkError.message;\n      }\n    }\n    \n    // Get OS info\n    debugInfo.os = {\n      platform: process.platform,\n      release: process.release,\n      versions: process.versions\n    };\n    \n    // Get memory info\n    debugInfo.memory = process.memoryUsage();\n    \n    // Get environment variables (removing sensitive ones)\n    const safeEnv = { ...process.env };\n    for (const key in safeEnv) {\n      if (key.includes('TOKEN') || key.includes('SECRET') || key.includes('KEY') || key.includes('PASS')) {\n        safeEnv[key] = '[REDACTED]';\n      }\n    }\n    debugInfo.env = safeEnv;\n    \n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify(debugInfo, null, 2)\n    };\n  } catch (error) {\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        error: 'Error generating debug info',\n        message: error.message,\n        stack: error.stack\n      })\n    };\n  }\n}; "],
  "mappings": ";AAAA,IAAM,OAAO,QAAQ,MAAM;AAC3B,IAAM,KAAK,QAAQ,IAAI;AAEvB,QAAQ,UAAU,OAAO,OAAO,YAAY;AAC1C,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gBAAgB;AAAA,EAClB;AAEA,MAAI;AACF,UAAM,YAAY;AAAA,MAChB,aAAa,QAAQ,IAAI;AAAA,MACzB,kBAAkB,QAAQ,IAAI;AAAA,MAC9B,OAAO,CAAC;AAAA,IACV;AAGA,UAAM,eAAe;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK,KAAK,QAAQ,IAAI,GAAG,kBAAkB;AAAA,MAC3C,KAAK,KAAK,QAAQ,IAAI,GAAG,qBAAqB;AAAA,MAC9C,KAAK,KAAK,QAAQ,IAAI,GAAG,wBAAwB;AAAA,IACnD;AAEA,cAAU,aAAa,CAAC;AAGxB,eAAW,WAAW,cAAc;AAClC,gBAAU,WAAW,OAAO,IAAI;AAAA,QAC9B,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,UAAU;AAAA,QACV,OAAO,CAAC;AAAA,QACR,OAAO;AAAA,MACT;AAEA,UAAI;AAEF,cAAM,SAAS,GAAG,WAAW,OAAO;AACpC,kBAAU,WAAW,OAAO,EAAE,SAAS;AAEvC,YAAI,QAAQ;AAEV,gBAAM,QAAQ,GAAG,SAAS,OAAO;AACjC,oBAAU,WAAW,OAAO,EAAE,cAAc,MAAM,YAAY;AAG9D,cAAI,MAAM,YAAY,GAAG;AACvB,gBAAI;AACF,iBAAG,WAAW,SAAS,GAAG,UAAU,IAAI;AACxC,wBAAU,WAAW,OAAO,EAAE,WAAW;AAGzC,oBAAM,QAAQ,GAAG,YAAY,OAAO;AACpC,wBAAU,WAAW,OAAO,EAAE,YAAY,MAAM;AAChD,wBAAU,WAAW,OAAO,EAAE,QAAQ,MAAM,MAAM,GAAG,EAAE;AAAA,YACzD,SAAS,WAAW;AAClB,wBAAU,WAAW,OAAO,EAAE,QAAQ,0BAA0B,UAAU,OAAO;AAAA,YACnF;AAAA,UACF;AAAA,QACF;AAAA,MACF,SAAS,YAAY;AACnB,kBAAU,WAAW,OAAO,EAAE,QAAQ,WAAW;AAAA,MACnD;AAAA,IACF;AAGA,cAAU,KAAK;AAAA,MACb,UAAU,QAAQ;AAAA,MAClB,SAAS,QAAQ;AAAA,MACjB,UAAU,QAAQ;AAAA,IACpB;AAGA,cAAU,SAAS,QAAQ,YAAY;AAGvC,UAAM,UAAU,EAAE,GAAG,QAAQ,IAAI;AACjC,eAAW,OAAO,SAAS;AACzB,UAAI,IAAI,SAAS,OAAO,KAAK,IAAI,SAAS,QAAQ,KAAK,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,MAAM,GAAG;AAClG,gBAAQ,GAAG,IAAI;AAAA,MACjB;AAAA,IACF;AACA,cAAU,MAAM;AAEhB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,WAAW,MAAM,CAAC;AAAA,IACzC;AAAA,EACF,SAAS,OAAO;AACd,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,QACP,SAAS,MAAM;AAAA,QACf,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
